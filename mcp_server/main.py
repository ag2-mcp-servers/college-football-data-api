# generated by fastapi-codegen:
#   filename:  openapi.yaml
#   timestamp: 2025-06-28T18:16:39+00:00



import argparse
import json
import os
from typing import *
from typing import Optional

from autogen.mcp.mcp_proxy import MCPProxy
from autogen.mcp.mcp_proxy.security import APIKeyHeader, BaseSecurity
from fastapi import Query
from pydantic import conint

from models import (
    BoxScore,
    CalendarGetResponse,
    CoachesGetResponse,
    ConferencesGetResponse,
    DraftPicksGetResponse,
    DraftPositionsGetResponse,
    DraftTeamsGetResponse,
    DrivesGetResponse,
    GamesGetResponse,
    GamesMediaGetResponse,
    GamesPlayersGetResponse,
    GamesTeamsGetResponse,
    GamesWeatherGetResponse,
    LinesGetResponse,
    LivePlayByPlay,
    MetricsWpGetResponse,
    MetricsWpPregameGetResponse,
    PlayerPortalGetResponse,
    PlayerReturningGetResponse,
    PlayerSearchGetResponse,
    PlayerUsageGetResponse,
    PlaysGetResponse,
    PlayStatsGetResponse,
    PlayStatTypesGetResponse,
    PlayTypesGetResponse,
    PpaGamesGetResponse,
    PpaPlayersGamesGetResponse,
    PpaPlayersSeasonGetResponse,
    PpaPredictedGetResponse,
    PpaTeamsGetResponse,
    RankingsGetResponse,
    RatingsEloGetResponse,
    RatingsSpConferencesGetResponse,
    RatingsSpGetResponse,
    RatingsSrsGetResponse,
    RecordsGetResponse,
    RecruitingGroupsGetResponse,
    RecruitingPlayersGetResponse,
    RecruitingTeamsGetResponse,
    RosterGetResponse,
    ScoreboardGetResponse,
    StatsCategoriesGetResponse,
    StatsGameAdvancedGetResponse,
    StatsPlayerSeasonGetResponse,
    StatsSeasonAdvancedGetResponse,
    StatsSeasonGetResponse,
    TalentGetResponse,
    TeamMatchup,
    TeamsFbsGetResponse,
    TeamsGetResponse,
    VenuesGetResponse,
)

app = MCPProxy(
    contact={'email': 'admin@collegefootballdata.com'},
    description='This is an API for accessing all sorts of college football data.  Please note that API keys should be supplied with "Bearer " prepended (e.g. "Bearer your_key"). API keys can be acquired from the CollegeFootballData.com website.',
    title='College Football Data API',
    version='4.4.12',
    servers=[{'url': 'https://api.collegefootballdata.com'}],
)


@app.get(
    '/calendar',
    description=""" Get calendar of weeks by season """,
    tags=['calendar_management'],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def get_calendar(year: int):
    """
    Season calendar
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/coaches',
    description=""" Coaching history """,
    tags=['team_performance_stats', 'historical_ranking_data'],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def get_coaches(
    first_name: Optional[str] = Query(None, alias='firstName'),
    last_name: Optional[str] = Query(None, alias='lastName'),
    team: Optional[str] = None,
    year: Optional[conint(ge=1869)] = None,
    min_year: Optional[conint(ge=1869)] = Query(None, alias='minYear'),
    max_year: Optional[conint(ge=1869)] = Query(None, alias='maxYear'),
):
    """
    Coaching records and history
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/conferences',
    description=""" Get conference list """,
    tags=['calendar_management'],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def get_conferences():
    """
    Conferences
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/draft/picks',
    description=""" List of NFL Draft picks """,
    tags=['draft_and_roster_operations', 'roster_statistics_management'],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def get_draft_picks(
    year: Optional[int] = None,
    nfl_team: Optional[str] = Query(None, alias='nflTeam'),
    college: Optional[str] = None,
    conference: Optional[str] = None,
    position: Optional[str] = None,
):
    """
    List of NFL Draft picks
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/draft/positions',
    description=""" List of NFL positions """,
    tags=['team_information_management'],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def get_n_f_l_positions():
    """
    List of NFL positions
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/draft/teams',
    description=""" List of NFL teams """,
    tags=['team_information_management'],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def get_n_f_l_teams():
    """
    List of NFL teams
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/drives',
    description=""" Get game drives """,
    tags=['team_performance_stats', 'game_results_retrieval'],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def get_drives(
    season_type: Optional[str] = Query('regular', alias='seasonType'),
    year: conint(ge=2001) = ...,
    week: Optional[conint(ge=1, le=16)] = None,
    team: Optional[str] = None,
    offense: Optional[str] = None,
    defense: Optional[str] = None,
    conference: Optional[str] = None,
    offense_conference: Optional[str] = Query(None, alias='offenseConference'),
    defense_conference: Optional[str] = Query(None, alias='defenseConference'),
    classification: Optional[str] = None,
):
    """
    Drive data and results
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/game/box/advanced',
    description=""" Get advanced box score data """,
    tags=['game_data_management', 'game_results_retrieval'],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def get_advanced_box_score(game_id: int = Query(..., alias='gameId')):
    """
    Advanced box scores
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/games',
    description=""" Get game results """,
    tags=['game_data_management', 'game_results_retrieval', 'team_performance_stats'],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def get_games(
    year: conint(ge=1869),
    week: Optional[conint(ge=1, le=16)] = None,
    season_type: Optional[str] = Query('regular', alias='seasonType'),
    team: Optional[str] = None,
    home: Optional[str] = None,
    away: Optional[str] = None,
    conference: Optional[str] = None,
    division: Optional[str] = None,
    id: Optional[int] = None,
):
    """
    Games and results
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/games/media',
    description=""" Game media information (TV, radio, etc) """,
    tags=['calendar_management', 'game_data_management'],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def get_game_media(
    year: conint(ge=2001),
    week: Optional[conint(ge=1, le=16)] = None,
    season_type: Optional[str] = Query(None, alias='seasonType'),
    team: Optional[str] = None,
    conference: Optional[str] = None,
    media_type: Optional[str] = Query(None, alias='mediaType'),
    classification: Optional[str] = None,
):
    """
    Game media information and schedules
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/games/players',
    description=""" Player stats broken down by game """,
    tags=['individual_player_stats', 'team_performance_stats', 'game_data_management'],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def get_player_game_stats(
    year: conint(ge=2001),
    week: Optional[conint(ge=1, le=16)] = None,
    season_type: Optional[str] = Query('regular', alias='seasonType'),
    team: Optional[str] = None,
    conference: Optional[str] = None,
    category: Optional[str] = None,
    game_id: Optional[int] = Query(None, alias='gameId'),
):
    """
    Player game stats
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/games/teams',
    description=""" Team stats broken down by game """,
    tags=['team_performance_stats', 'game_data_management', 'game_results_retrieval'],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def get_team_game_stats(
    year: conint(ge=2001),
    week: Optional[conint(ge=1, le=16)] = None,
    season_type: Optional[str] = Query('regular', alias='seasonType'),
    team: Optional[str] = None,
    conference: Optional[str] = None,
    game_id: Optional[int] = Query(None, alias='gameId'),
    classification: Optional[str] = None,
):
    """
    Team game stats
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/games/weather',
    description=""" Weather information for the hour of kickoff """,
    tags=['game_data_management'],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def get_game_weather(
    game_id: Optional[int] = Query(None, alias='gameId'),
    year: Optional[conint(ge=2001)] = None,
    week: Optional[conint(ge=1, le=16)] = None,
    season_type: Optional[str] = Query(None, alias='seasonType'),
    team: Optional[str] = None,
    conference: Optional[str] = None,
    classification: Optional[str] = None,
):
    """
    Game weather information (Patreon only)
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/lines',
    description=""" Closing betting lines """,
    tags=['betting_info_and_odds', 'game_data_management'],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def get_lines(
    game_id: Optional[int] = Query(None, alias='gameId'),
    year: Optional[conint(ge=2013)] = None,
    week: Optional[conint(ge=1, le=16)] = None,
    season_type: Optional[str] = Query('regular', alias='seasonType'),
    team: Optional[str] = None,
    home: Optional[str] = None,
    away: Optional[str] = None,
    conference: Optional[str] = None,
):
    """
    Betting lines
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/live/plays',
    description=""" Get live metrics and PBP """,
    tags=['game_data_management', 'team_performance_stats'],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def get_live_plays(id: int):
    """
    Live metrics and PBP (Patreon only)
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/metrics/wp',
    description=""" Win probability data """,
    tags=['win_probability_metrics', 'game_data_management'],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def get_win_probability_data(game_id: int = Query(..., alias='gameId')):
    """
    Win probability chart data
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/metrics/wp/pregame',
    description=""" Pregame win probabilities """,
    tags=['win_probability_metrics', 'team_performance_stats'],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def get_pregame_win_probabilities(
    year: Optional[conint(ge=2001)] = None,
    week: Optional[conint(ge=1, le=16)] = None,
    team: Optional[str] = None,
    season_type: Optional[str] = Query(None, alias='seasonType'),
):
    """
    Pregame win probability data
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/play/stat/types',
    description=""" Type of play stats """,
    tags=[
        'individual_player_stats',
        'team_performance_stats',
        'play_performance_analysis',
    ],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def get_play_stat_types():
    """
    Types of player play stats
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/play/stats',
    description=""" Gets player stats associated by play (limit 1000) """,
    tags=[
        'individual_player_stats',
        'play_performance_analysis',
        'game_data_management',
    ],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def get_play_stats(
    year: Optional[conint(ge=2013)] = None,
    week: Optional[conint(ge=1, le=16)] = None,
    team: Optional[str] = None,
    game_id: Optional[int] = Query(None, alias='gameId'),
    athlete_id: Optional[int] = Query(None, alias='athleteId'),
    stat_type_id: Optional[int] = Query(None, alias='statTypeId'),
    season_type: Optional[str] = Query(None, alias='seasonType'),
    conference: Optional[str] = None,
):
    """
    Play stats by play
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/play/types',
    description=""" Types of plays """,
    tags=['play_performance_analysis'],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def get_play_types():
    """
    Play types
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/player/portal',
    description=""" Transfer portal by season """,
    tags=['draft_and_roster_operations'],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def get_transfer_portal(year: int):
    """
    Transfer portal by season
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/player/returning',
    description=""" Returning production metrics """,
    tags=['team_performance_stats', 'team_information_management'],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def get_returning_production(
    year: Optional[conint(ge=2014)] = None,
    team: Optional[str] = None,
    conference: Optional[str] = None,
):
    """
    Team returning production metrics
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/player/search',
    description=""" Search for players """,
    tags=['individual_player_stats', 'team_performance_stats'],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def player_search(
    search_term: str = Query(..., alias='searchTerm'),
    position: Optional[str] = None,
    team: Optional[str] = None,
    year: Optional[conint(ge=2001)] = None,
):
    """
    Search for player information
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/player/usage',
    description=""" Player usage metrics by season """,
    tags=['individual_player_stats', 'team_performance_stats'],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def get_player_usage(
    year: conint(ge=2013) = 2022,
    team: Optional[str] = None,
    conference: Optional[str] = None,
    position: Optional[str] = None,
    player_id: Optional[int] = Query(None, alias='playerId'),
    exclude_garbage_time: Optional[bool] = Query(None, alias='excludeGarbageTime'),
):
    """
    Player usage metrics broken down by season
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/plays',
    description=""" Get play data and results """,
    tags=[
        'play_performance_analysis',
        'game_data_management',
        'team_performance_stats',
    ],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def get_plays(
    season_type: Optional[str] = Query('regular', alias='seasonType'),
    year: conint(ge=2001) = ...,
    week: conint(ge=1, le=16) = ...,
    team: Optional[str] = None,
    offense: Optional[str] = None,
    defense: Optional[str] = None,
    conference: Optional[str] = None,
    offense_conference: Optional[str] = Query(None, alias='offenseConference'),
    defense_conference: Optional[str] = Query(None, alias='defenseConference'),
    play_type: Optional[int] = Query(None, alias='playType'),
    classification: Optional[str] = None,
):
    """
    Play by play data
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/ppa/games',
    description=""" Predicted Points Added (PPA) by game """,
    tags=['team_performance_stats', 'game_data_management', 'win_probability_metrics'],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def get_game_p_p_a(
    year: conint(ge=2001),
    week: Optional[conint(ge=1, le=16)] = None,
    team: Optional[str] = None,
    conference: Optional[str] = None,
    exclude_garbage_time: Optional[bool] = Query(None, alias='excludeGarbageTime'),
    season_type: Optional[str] = Query('regular', alias='seasonType'),
):
    """
    Team Predicated Points Added (PPA/EPA) by game
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/ppa/players/games',
    description=""" Predicted Points Added (PPA) by player game """,
    tags=['individual_player_stats', 'team_performance_stats', 'game_data_management'],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def get_player_game_p_p_a(
    year: Optional[conint(ge=2013)] = None,
    week: Optional[conint(ge=1, le=16)] = None,
    team: Optional[str] = None,
    position: Optional[str] = None,
    player_id: Optional[int] = Query(None, alias='playerId'),
    threshold: Optional[str] = None,
    exclude_garbage_time: Optional[bool] = Query(None, alias='excludeGarbageTime'),
    season_type: Optional[str] = Query('regular', alias='seasonType'),
):
    """
    Player Predicated Points Added (PPA/EPA) broken down by game
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/ppa/players/season',
    description=""" Predicted Points Added (PPA) by player season """,
    tags=['individual_player_stats', 'team_performance_stats'],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def get_player_season_p_p_a(
    year: Optional[conint(ge=2013)] = None,
    team: Optional[str] = None,
    conference: Optional[str] = None,
    position: Optional[str] = None,
    player_id: Optional[int] = Query(None, alias='playerId'),
    threshold: Optional[str] = None,
    exclude_garbage_time: Optional[bool] = Query(None, alias='excludeGarbageTime'),
):
    """
    Player Predicated Points Added (PPA/EPA) broken down by season
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/ppa/predicted',
    description=""" Predicted Points """,
    tags=['play_performance_analysis', 'win_probability_metrics'],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def get_predicted_points(down: conint(ge=1, le=4), distance: conint(ge=1, le=99) = ...):
    """
    Predicted Points (i.e. Expected Points or EP)
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/ppa/teams',
    description=""" Predicted Points Added (PPA) """,
    tags=['team_performance_stats', 'win_probability_metrics'],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def get_team_p_p_a(
    year: Optional[conint(ge=2001)] = None,
    team: Optional[str] = None,
    conference: Optional[str] = None,
    exclude_garbage_time: Optional[bool] = Query(None, alias='excludeGarbageTime'),
):
    """
    Predicted Points Added (PPA/EPA) data by team
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/rankings',
    description=""" Poll rankings """,
    tags=['historical_ranking_data'],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def get_rankings(
    year: conint(ge=1936),
    week: Optional[conint(ge=1, le=16)] = None,
    season_type: Optional[str] = Query('regular', alias='seasonType'),
):
    """
    Historical polls and rankings
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/ratings/elo',
    description=""" Elo rating data """,
    tags=['historical_ranking_data', 'team_performance_stats'],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def get_elo_ratings(
    year: Optional[int] = None,
    week: Optional[int] = None,
    team: Optional[str] = None,
    conference: Optional[str] = None,
):
    """
    Historical Elo ratings
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/ratings/sp',
    description=""" SP+ rating data """,
    tags=['historical_ranking_data', 'team_performance_stats'],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def get_s_p_ratings(year: Optional[conint(ge=1970)] = None, team: Optional[str] = None):
    """
    Historical SP+ ratings
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/ratings/sp/conferences',
    description=""" Get average SP+ historical rating data by conference """,
    tags=['historical_ranking_data', 'team_performance_stats'],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def get_conference_s_p_ratings(
    year: Optional[conint(ge=1970)] = None, conference: Optional[str] = None
):
    """
    Historical SP+ ratings by conference
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/ratings/srs',
    description=""" SRS rating data (requires either a year or team specified) """,
    tags=['historical_ranking_data', 'team_performance_stats'],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def get_s_r_s_ratings(
    year: Optional[conint(ge=1897)] = None,
    team: Optional[str] = None,
    conference: Optional[str] = None,
):
    """
    Historical SRS ratings
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/records',
    description=""" Get team records by year """,
    tags=[
        'team_performance_stats',
        'historical_ranking_data',
        'team_information_management',
    ],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def get_team_records(
    year: Optional[conint(ge=1869)] = None,
    team: Optional[str] = None,
    conference: Optional[str] = None,
):
    """
    Team records
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/recruiting/groups',
    description=""" Gets a list of aggregated statistics by team and position grouping """,
    tags=['player_recruitment_activities', 'team_performance_stats'],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def get_recruiting_groups(
    start_year: Optional[conint(ge=2000)] = Query(None, alias='startYear'),
    end_year: Optional[conint(ge=2000)] = Query(None, alias='endYear'),
    team: Optional[str] = None,
    conference: Optional[str] = None,
):
    """
    Recruit position group ratings
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/recruiting/players',
    description=""" Get player recruiting rankings and data. Requires either a year or team to be specified. """,
    tags=['player_recruitment_activities', 'individual_player_stats'],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def get_recruiting_players(
    year: Optional[conint(ge=2000)] = None,
    classification: Optional[str] = 'HighSchool',
    position: Optional[str] = None,
    state: Optional[str] = None,
    team: Optional[str] = None,
):
    """
    Player recruiting ratings and rankings
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/recruiting/teams',
    description=""" Team recruiting rankings """,
    tags=[
        'team_performance_stats',
        'historical_ranking_data',
        'player_recruitment_activities',
    ],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def get_recruiting_teams(
    year: Optional[conint(ge=2000)] = None, team: Optional[str] = None
):
    """
    Team recruiting rankings and ratings
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/roster',
    description=""" Roster data """,
    tags=[
        'draft_and_roster_operations',
        'roster_statistics_management',
        'team_information_management',
    ],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def get_roster(team: Optional[str] = None, year: Optional[conint(ge=2009)] = None):
    """
    Team rosters
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/scoreboard',
    description=""" Get live game results """,
    tags=['game_results_retrieval', 'game_data_management'],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def get_scoreboard(
    classification: Optional[str] = None, conference: Optional[str] = None
):
    """
    Live game results (Patreon only)
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/stats/categories',
    description=""" Stat category list """,
    tags=[
        'team_performance_stats',
        'roster_statistics_management',
        'game_results_retrieval',
    ],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def get_stat_categories():
    """
    Team stat categories
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/stats/game/advanced',
    description=""" Advanced team game stats """,
    tags=['team_performance_stats', 'game_data_management'],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def get_advanced_team_game_stats(
    year: Optional[conint(ge=2001)] = None,
    week: Optional[conint(ge=1, le=16)] = None,
    team: Optional[str] = None,
    opponent: Optional[str] = None,
    exclude_garbage_time: Optional[bool] = Query(None, alias='excludeGarbageTime'),
    season_type: Optional[str] = Query(None, alias='seasonType'),
):
    """
    Advanced team metrics by game
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/stats/player/season',
    description=""" Season player stats """,
    tags=['individual_player_stats', 'team_performance_stats'],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def get_player_season_stats(
    year: int,
    team: Optional[str] = None,
    conference: Optional[str] = None,
    start_week: Optional[int] = Query(None, alias='startWeek'),
    end_week: Optional[int] = Query(None, alias='endWeek'),
    season_type: Optional[str] = Query(None, alias='seasonType'),
    category: Optional[str] = None,
):
    """
    Player stats by season
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/stats/season',
    description=""" Team season stats """,
    tags=['team_performance_stats', 'calendar_management'],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def get_team_season_stats(
    year: Optional[conint(ge=2001)] = None,
    team: Optional[str] = None,
    conference: Optional[str] = None,
    start_week: Optional[conint(ge=1, le=16)] = Query(None, alias='startWeek'),
    end_week: Optional[conint(ge=1, le=16)] = Query(None, alias='endWeek'),
):
    """
    Team statistics by season
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/stats/season/advanced',
    description=""" Advanced team season stats """,
    tags=['team_performance_stats'],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def get_advanced_team_season_stats(
    year: Optional[conint(ge=2001)] = None,
    team: Optional[str] = None,
    exclude_garbage_time: Optional[bool] = Query(None, alias='excludeGarbageTime'),
    start_week: Optional[conint(ge=1, le=16)] = Query(None, alias='startWeek'),
    end_week: Optional[conint(ge=1, le=16)] = Query(None, alias='endWeek'),
):
    """
    Advanced team metrics by season
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/talent',
    description=""" Team talent composite """,
    tags=['team_performance_stats', 'historical_ranking_data'],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def get_talent(year: Optional[conint(ge=2015)] = None):
    """
    Team talent composite rankings
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/teams',
    description=""" Get team information """,
    tags=['team_information_management'],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def get_teams(conference: Optional[str] = None):
    """
    Team information
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/teams/fbs',
    description=""" Information on major division teams """,
    tags=['team_information_management', 'historical_ranking_data'],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def get_fbs_teams(year: Optional[conint(ge=1869)] = None):
    """
    FBS team list
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/teams/matchup',
    description=""" Matchup history """,
    tags=[
        'team_performance_stats',
        'team_information_management',
        'historical_ranking_data',
    ],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def get_team_matchup(
    team1: str,
    team2: str = ...,
    min_year: Optional[conint(ge=1869)] = Query(None, alias='minYear'),
    max_year: Optional[conint(ge=1869)] = Query(None, alias='maxYear'),
):
    """
    Team matchup history
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/venues',
    description=""" Venues """,
    tags=['venue_details_management'],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def get_venues():
    """
    Arena and venue information
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


if __name__ == "__main__":
    parser = argparse.ArgumentParser(description="MCP Server")
    parser.add_argument(
        "transport",
        choices=["stdio", "sse", "streamable-http"],
        help="Transport mode (stdio, sse or streamable-http)",
    )
    args = parser.parse_args()

    if "CONFIG_PATH" in os.environ:
        config_path = os.environ["CONFIG_PATH"]
        app.load_configuration(config_path)

    if "CONFIG" in os.environ:
        config = os.environ["CONFIG"]
        app.load_configuration_from_string(config)

    if "SECURITY" in os.environ:
        security_params = BaseSecurity.parse_security_parameters_from_env(
            os.environ,
        )

        app.set_security_params(security_params)

    mcp_settings = json.loads(os.environ.get("MCP_SETTINGS", "{}"))

    app.get_mcp(**mcp_settings).run(transport=args.transport)
